/** <auto-generated>
* Do not edit this file manually  
* This file was generated by proto-omgpp-gen.py 0.1.0 
* Any changes will be discarded after regeneration
* </auto-generated>
*/
using global::OmgppSharpCore.Interfaces;
using Google.Protobuf;
using System.Buffers;
using OmgppSharpClientServer;
namespace Sample.Messages
{
    public interface IGameCommandsClient
    {
        Task<global::awd.awd.Void> MoveLeft(global::awd.awd.Void message, bool isReliable);
        Task<global::awd.awd.MessageTest> MoveRight(global::awd.awd.Message message, bool isReliable);
        void MoveUp(bool isReliable);
        void MoveDown(global::awd.awd.Message message, bool isReliable);
    }

    public class GameCommandsClientHandler : IGameCommandsClient, IDisposable
    {
        global::OmgppSharpClientServer.Client client;
        Dictionary<long, OmgppSharpClientServer.IClientRpcHandler.ClientRpcHandlerDelegate> rpcHandlers = new Dictionary<long, OmgppSharpClientServer.IClientRpcHandler.ClientRpcHandlerDelegate>();
        Dictionary<ulong, OmgppSharpClientServer.IClientRpcHandler.ClientRpcHandlerDelegate> rpcResponseHandlers = new Dictionary<ulong, OmgppSharpClientServer.IClientRpcHandler.ClientRpcHandlerDelegate>();
        ulong reqId = 0;
        public GameCommandsClientHandler(global::OmgppSharpClientServer.Client client)
        {
            this.client = client;
            this.client.OnRpcCall += Client_OnRpcCall;
        }

        private void Client_OnRpcCall(global::OmgppSharpClientServer.Client client, System.Net.IPAddress remoteIp, ushort remotePort, bool isReliable, long methodId, ulong requestId, long argType, byte[]? argData)
        {
            if (rpcResponseHandlers.TryGetValue(requestId, out var handler))
                handler.Invoke(client, remoteIp, remotePort, isReliable, methodId, requestId, argType, argData);
        }
        public void Dispose()
        {
            this.client.OnRpcCall -= Client_OnRpcCall;
        }

        void RegisterRpc(long id, OmgppSharpClientServer.IClientRpcHandler.ClientRpcHandlerDelegate handlerAction)
        {
            rpcHandlers[id] = handlerAction;
        }

        public Task<global::awd.awd.Void> MoveLeft(global::awd.awd.Void message, bool isReliable)
        {

            var size = message.CalculateSize();
            var bytes = ArrayPool<byte>.Shared.Rent(size);
            message.WriteTo(bytes);

            var taskCompletionSource = new TaskCompletionSource<global::awd.awd.Void>();
            var reqId = Interlocked.Increment(ref this.reqId);
            var cancellationToken = new CancellationTokenSource();
            cancellationToken.CancelAfter(1000);

            if (rpcResponseHandlers.ContainsKey(reqId))
            {
                ArrayPool<byte>.Shared.Return(bytes);
                throw new Exception("Internal error; Request Id already registered");
            }

            var tokenRegisterHandler = cancellationToken.Token.Register(() =>
            {
                rpcResponseHandlers.Remove(reqId);
                taskCompletionSource.TrySetResult(default);
            });
            rpcResponseHandlers[reqId] = (client, ip, port, isReliable, methodId, requestId, argType, argData) =>
            {
                tokenRegisterHandler.Unregister();
                if (argType != global::awd.awd.Void.MessageId || argData == null || cancellationToken.Token.IsCancellationRequested)
                {
                    taskCompletionSource.TrySetResult(default);
                }
                else
                {
                    var msg = global::awd.awd.Void.Parser.ParseFrom(argData);
                    taskCompletionSource.TrySetResult(msg);
                }
                rpcResponseHandlers.Remove(reqId);
            };
            client.CallRpc(310292, reqId, global::awd.awd.Void.MessageId, new Span<byte>(bytes, 0, size), isReliable);
            ArrayPool<byte>.Shared.Return(bytes);
            return taskCompletionSource.Task;
        }
        public Task<global::awd.awd.MessageTest> MoveRight(global::awd.awd.Message message, bool isReliable)
        {

            var size = message.CalculateSize();
            var bytes = ArrayPool<byte>.Shared.Rent(size);
            message.WriteTo(bytes);

            var taskCompletionSource = new TaskCompletionSource<global::awd.awd.MessageTest>();
            var reqId = Interlocked.Increment(ref this.reqId);
            var cancellationToken = new CancellationTokenSource();
            cancellationToken.CancelAfter(1000);

            if (rpcResponseHandlers.ContainsKey(reqId))
            {
                ArrayPool<byte>.Shared.Return(bytes);
                throw new Exception("Internal error; Request Id already registered");
            }

            var tokenRegisterHandler = cancellationToken.Token.Register(() =>
            {
                rpcResponseHandlers.Remove(reqId);
                taskCompletionSource.TrySetResult(default);
            });
            rpcResponseHandlers[reqId] = (client, ip, port, isReliable, methodId, requestId, argType, argData) =>
            {
                tokenRegisterHandler.Unregister();
                if (argType != global::awd.awd.MessageTest.MessageId || argData == null || cancellationToken.Token.IsCancellationRequested)
                {
                    taskCompletionSource.TrySetResult(default);
                }
                else
                {
                    var msg = global::awd.awd.MessageTest.Parser.ParseFrom(argData);
                    taskCompletionSource.TrySetResult(msg);
                }
                rpcResponseHandlers.Remove(reqId);
            };
            client.CallRpc(407415, reqId, global::awd.awd.Message.MessageId, new Span<byte>(bytes, 0, size), isReliable);
            ArrayPool<byte>.Shared.Return(bytes);
            return taskCompletionSource.Task;
        }
        public void MoveUp(bool isReliable)
        {
            client.CallRpc(316538, 0, 0, null, isReliable);
        }
        public void MoveDown(global::awd.awd.Message message, bool isReliable)
        {

            var size = message.CalculateSize();
            var bytes = ArrayPool<byte>.Shared.Rent(size);
            message.WriteTo(bytes);
            client.CallRpc(347482, 0, global::awd.awd.Message.MessageId, new Span<byte>(bytes, 0, size), isReliable);
            ArrayPool<byte>.Shared.Return(bytes);
        }

    }
}
