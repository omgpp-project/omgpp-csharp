/** <auto-generated>
* Do not edit this file manually  
* This file was generated by proto-omgpp-gen.py 0.1.0 
* Any changes will be discarded after regeneration
* </auto-generated>
*/
using System.Net;
using global::OmgppSharpCore.Interfaces;
using Google.Protobuf;
using OmgppSharpClientServer;
using System.Buffers;
using static OmgppSharpClientServer.IServerRpcHandler;
namespace Sample.Messages
{
    public interface IGameCommandsServer
    {
        global::awd.awd.Void MoveLeft(System.Guid clientGuid, System.Net.IPAddress ip, ushort port, global::awd.awd.Void message);
        global::awd.awd.MessageTest MoveRight(System.Guid clientGuid, System.Net.IPAddress ip, ushort port, global::awd.awd.Message message);
        void MoveUp(System.Guid clientGuid, System.Net.IPAddress ip, ushort port);
        void MoveDown(System.Guid clientGuid, System.Net.IPAddress ip, ushort port, global::awd.awd.Message message);
    }

    public class GameCommandsServerHandler : global::OmgppSharpClientServer.IServerRpcHandler
    {
        IGameCommandsServer service;
        Dictionary<long, ServerRpcHandlerDelegate> rpcHandlers = new Dictionary<long, ServerRpcHandlerDelegate>();

        public GameCommandsServerHandler(IGameCommandsServer service)
        {
            this.service = service;
            RegisterRpc(310292, HandleMoveLeft);
            RegisterRpc(407415, HandleMoveRight);
            RegisterRpc(316538, HandleMoveUp);
            RegisterRpc(347482, HandleMoveDown);

        }
        private void HandleMoveLeft(global::OmgppSharpClientServer.Server server, Guid clientGuid, IPAddress ip, ushort port, bool isReliable, long methodId, ulong requestId, long argType, byte[]? argData)
        {
            if (argType != global::awd.awd.Void.MessageId) return;
            argData = argData ?? Array.Empty<byte>();
            var result = service.MoveLeft(clientGuid, ip, port, global::awd.awd.Void.Parser.ParseFrom(argData));
            var size = result?.CalculateSize() ?? 0;
            var data = ArrayPool<byte>.Shared.Rent(size);
            result?.WriteTo(data);
            server.CallRpc(clientGuid, methodId, requestId, global::awd.awd.Void.MessageId, new Span<byte>(data, 0, size), isReliable);
            ArrayPool<byte>.Shared.Return(data);

        }
        private void HandleMoveRight(global::OmgppSharpClientServer.Server server, Guid clientGuid, IPAddress ip, ushort port, bool isReliable, long methodId, ulong requestId, long argType, byte[]? argData)
        {
            if (argType != global::awd.awd.Message.MessageId) return;
            argData = argData ?? Array.Empty<byte>();
            var result = service.MoveRight(clientGuid, ip, port, global::awd.awd.Message.Parser.ParseFrom(argData));
            var size = result?.CalculateSize() ?? 0;
            var data = ArrayPool<byte>.Shared.Rent(size);
            result?.WriteTo(data);
            server.CallRpc(clientGuid, methodId, requestId, global::awd.awd.Message.MessageId, new Span<byte>(data, 0, size), isReliable);
            ArrayPool<byte>.Shared.Return(data);

        }
        private void HandleMoveUp(global::OmgppSharpClientServer.Server server, Guid clientGuid, IPAddress ip, ushort port, bool isReliable, long methodId, ulong requestId, long argType, byte[]? argData)
        {
            service.MoveUp(clientGuid, ip, port);
        }
        private void HandleMoveDown(global::OmgppSharpClientServer.Server server, Guid clientGuid, IPAddress ip, ushort port, bool isReliable, long methodId, ulong requestId, long argType, byte[]? argData)
        {
            if (argType != global::awd.awd.Message.MessageId) return;
            argData = argData ?? Array.Empty<byte>();
            service.MoveDown(clientGuid, ip, port, global::awd.awd.Message.Parser.ParseFrom(argData));
        }


        public void HandleRpc(global::OmgppSharpClientServer.Server server, Guid clientGuid, IPAddress ip, ushort port, bool isReliable, long methodId, ulong requestId, long argType, byte[]? argData)
        {
            if (rpcHandlers.TryGetValue(methodId, out var handler))
                handler.Invoke(server, clientGuid, ip, port, isReliable, methodId, requestId, argType, argData);
        }
        void RegisterRpc(long id, ServerRpcHandlerDelegate handlerAction)
        {
            rpcHandlers[id] = handlerAction;
        }
    }
}

